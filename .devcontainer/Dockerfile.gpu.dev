# Dockerfile-gpu.dev
#
# NVIDIA GPU-enabled development environment
# This Dockerfile builds upon NVIDIA's CUDA base image to provide GPU acceleration
# through CUDA and cuDNN. It includes all necessary NVIDIA drivers and libraries
# for deep learning acceleration with PyTorch.
# The nvidia-container-toolkit must be installed on the host system...
#
### Host Machine Configuration Instructions
#
# --- Add NVIDIA package repositories
# curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg

# curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
#     sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
#     sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list

# --- Install NVIDIA Container Toolkit
# sudo apt-get update
# sudo apt-get install -y nvidia-container-toolkit
# sudo nvidia-ctk runtime configure --runtime=docker
# sudo systemctl restart docker

# --- Verify Installation
# sudo docker run --rm --gpus all nvidia/cuda:12.6.2-base-ubuntu22.04 nvidia-smi


FROM nvidia/cuda:12.6.2-cudnn-devel-ubuntu22.04

# Set essential environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/usr/local/cuda
ENV PATH=${CUDA_HOME}/bin:${PATH}
ENV LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1

WORKDIR /app

# Install Python 3.12 and development tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    software-properties-common \
    gnupg \
    jq \
    wget && \
    add-apt-repository ppa:deadsnakes/ppa -y && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.12 \
    python3.12-dev \
    python3.12-distutils \
    build-essential \
    curl \
    git \
    libffi-dev \
    # Add CUDA development dependencies
    cuda-command-line-tools-12-0 \
    cuda-cudart-dev-12-0 \
    cuda-nvcc-12-0 \
    && rm -rf /var/lib/apt/lists/*

# Ensure CUDA compatibility
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/cuda-stubs.conf && \
    ldconfig

# Set Python 3.12 as default
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3.12 -

# Add Poetry to PATH
ENV PATH="${PATH}:/root/.local/bin"

# Configure Poetry to not create virtual environments
RUN poetry config virtualenvs.create false

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Install dependencies with GPU support
RUN poetry install --no-root --no-interaction --with gpu


# Copy the rest of the application code
COPY . .
